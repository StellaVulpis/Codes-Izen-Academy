전부 1씩  증감.
1번째 예제는 *과 공백 한개씩,
2번째 예제는 *과 공백 두개
(*가 한번돌때 공백은 가감식으로 5번돈다(이중))

*""""""""""""
**"""""""""""
***"""""""""
****""""""""
*****""""""
******"""""
*******"""
********""
*********"

                   *
                 ***
               *****
             *******
          **********
       *************
    ****************
  ******************
********************

중요: 피라미드 모양엔 반복횟수가 매우 중요하다. 별을 찍어서 전체적인 모양을 
완성시키는 것이기 때문에 반복횟수에 따라 모양도 변한다. 
별을 출력하는 반복문의 반복횟수는 11이 기본값이며 다이아몬드를 만들땐 별 출력 반복문이 2개, 
크기를 전체적으로 바꿀땐 11의 배수로 증가시켜야 한다.
(피라미드 x1: 11 | 다이아몬드 x1: 11+11  | 피라미드 x2: 22 | 다이아몬드 x2: 22+22 ...)


1차가 돌 때 한번에 5번
++
(1*2)-1 1
(2*2)-1 3
(3*2)-1 5
(4*2)-1 7
(5*2)-1 9

1차가 돌 때 한번에 11번
++
1-(i*2) 
...
11-(i*2)
>> 

1)
=>9 (11-i(1)*2) 반복
2)
=>7 (11-i(2)*2) 반복
3)
=>5 (11-i(3)*2) 반복
...
2차반복문은 1차가 한번 돌 때 전부돌기에, 종결 조건을
1차인 i와 연결해서 *2한 값을 빼주면 i가 증감할때마다
빼지는 값이 커져서, 2차 반복문 A는 종결값을 i*2-1으로
설정함으로써 한번 반복하는 값이 1 3 5 7 9 같이 3의 배수처럼
매번 달라진다.
2번째 2차 반복문인 B는 11이라는 값에 i와 연결해서 2를
곱한 값을 빼는것으로 종결조건을 설정함으로써 한번
B가 한번 돌 때마다 i가 증가해서 빼주는 값이 커지고,
즉, 한번 돌 때 종결조건 수치가 줄어드므로 가감식처럼
줄어든다. 다만 가감식은 반복하는 내내 동일한 값에서 
큰값》작은값으로 줄어드는 것 뿐이라면 이 식은 매번
반복할 때 마다 최대 반복하는 값이 점차적으로 줄어든다.

가감식: 11 10 9 8 ... 1 범위를 동일하게 11번 반복
i와 연결한 증감식: 매번 9 | 7 | 5 | 3 | 1 까지 줄어들며 반복

전체 균형을 A/B 이차반복문에서 결정하므로
크기조절은 1차반복문의 증감횟수를 늘려주면 된다.

시작값이 1인 이유는 1 3 5 7 9 / 9 7 5 3 1 처럼
3의 배수를 맞추려면 총 반복할 값을 계산해야되서
편의성을 위해서 1로 맞추는 것.


1차반복문의 역할은 이렇게 증감되고 가감되서
출력되는 A/B가 한번 다 출력되고 다음거를
출력해주기전에 줄바꿈을 해주는 역할을 한다.
3의 배수로 회차마다 가감 또는 증감을 하더라도
줄바꿈이 없다면 그냥 긴 일직선이 되버린다.

1차 반복문이 회차마다 줄바꿈
#
###
#####
#######

줄바꿈 없음 》 ################
* 앞이나 뒤에 공백을 집어넣으면 반삼각형이 정삼각형으로 
변하는 이유는 간단하다. 여백이 없이 꽉차서 원래는 반삼각형(A: 크게>작게, B: 작게>크게)
으로 출력이되어야 하는 모양이 공백이 들어가서 옆으로 한칸씩 출력될때마다 밀려서
위치가 변하게되어 정삼각형으로 바뀌는 것.

피라미드의 윗부분은 별이 1 3 5 7 9 ((i*2)-1)로 증가한다.
반대로 공백은 9 7 5 3 1 로 감소한다. (11-(i*2))

피라미드의 아래부분은 줄바꿈을 해서 새로운 for를 시작해서
형식은 똑같이 이중반복문으로 하며 이번엔 1 3 5 7 9 
형식이 아닌 7 5 3 1 만 나오게 된다.

별은 7 5 3 1로 반대로 감소(9-(j*2))해서 7 5 3 1이 되고,
공백은 윗부분과는 반대로 3 5 7 9(j*2)+1로 증가한다. 
(이미 윗부분에 중간부분이 나왔으므로 1 3 5 7 | 7 5 3 1만 있으면 된다.)


[완성코드]
void pyramidPractice()
	{
		// i = 3, a = 11, b = (i*2)-1
		// Max loop range will be shorter every time it is excuted(A/B).

		System.out.printf("\n\n\n\n");
		for(int i = 1; i<=5;i++) // size
		{
			// Start of triangle | 1 3 5 7 9

			for(int a=1; a<=11-(i*2); a++) // margin-left, spaces | big num >> small num
					System.out.print(" ");
			for(int b=1;b<=(i*2)-1;b++) // Pyramid | small num >> big num
					System.out.print(" *");

			// Start of reverse triangle right after the triangle | 9 7 5 3 1
			// *의 시작포인트에서 9개로 시작을 해야함.
			
		System.out.println();
		}
		for(int j=1;j<=5;j++)
		{
			for(int d=1;d<=(j*2)+1;d++)
				System.out.print(" ");
			for(int c=1;c<=9-(j*2);c++)
				System.out.print(" *");
			
		System.out.println();
		}
	}	


